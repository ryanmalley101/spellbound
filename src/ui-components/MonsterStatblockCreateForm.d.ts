/***************************************************************************
 * The contents of this file were generated with Amplify Studio.           *
 * Please refrain from making any modifications to this file.              *
 * Any changes to this file will be overwritten when running amplify pull. *
 **************************************************************************/

import * as React from "react";
import { GridProps, SwitchFieldProps, TextFieldProps } from "@aws-amplify/ui-react";
export declare type EscapeHatchProps = {
    [elementHierarchy: string]: Record<string, unknown>;
} | null;
export declare type VariantValues = {
    [key: string]: string;
};
export declare type Variant = {
    variantValues: VariantValues;
    overrides: EscapeHatchProps;
};
export declare type ValidationResponse = {
    hasError: boolean;
    errorMessage?: string;
};
export declare type ValidationFunction<T> = (value: T, validationResponse: ValidationResponse) => ValidationResponse | Promise<ValidationResponse>;
export declare type MonsterStatblockCreateFormInputValues = {
    ownerId?: string;
    name?: string;
    createdAt?: string;
    updatedAt?: string;
    desc?: string;
    size?: string;
    type?: string;
    subtype?: string;
    group?: string;
    alignment?: string;
    armor_class?: number;
    armor_desc?: string;
    current_hit_points?: number;
    hit_points?: number;
    hit_dice_num?: number;
    hit_dice?: string;
    strength?: number;
    dexterity?: number;
    constitution?: number;
    intelligence?: number;
    wisdom?: number;
    charisma?: number;
    strength_save?: number;
    dexterity_save?: number;
    constitution_save?: number;
    intelligence_save?: number;
    wisdom_save?: number;
    charisma_save?: number;
    save_proficiencies?: string[];
    perception?: number;
    damage_vulnerabilities?: string;
    damage_vulnerability_list?: string[];
    damage_resistances?: string;
    damage_resistance_list?: string[];
    damage_immunities?: string;
    damage_immunity_list?: string[];
    condition_immunities?: string;
    condition_immunity_list?: string[];
    blindsight?: number;
    blindBeyond?: boolean;
    darkvision?: number;
    tremorsense?: number;
    truesight?: number;
    senses?: string;
    languages?: string;
    challenge_rating?: string;
    cr?: number;
    legendary_desc?: string;
    mythic_desc?: string;
};
export declare type MonsterStatblockCreateFormValidationValues = {
    ownerId?: ValidationFunction<string>;
    name?: ValidationFunction<string>;
    createdAt?: ValidationFunction<string>;
    updatedAt?: ValidationFunction<string>;
    desc?: ValidationFunction<string>;
    size?: ValidationFunction<string>;
    type?: ValidationFunction<string>;
    subtype?: ValidationFunction<string>;
    group?: ValidationFunction<string>;
    alignment?: ValidationFunction<string>;
    armor_class?: ValidationFunction<number>;
    armor_desc?: ValidationFunction<string>;
    current_hit_points?: ValidationFunction<number>;
    hit_points?: ValidationFunction<number>;
    hit_dice_num?: ValidationFunction<number>;
    hit_dice?: ValidationFunction<string>;
    strength?: ValidationFunction<number>;
    dexterity?: ValidationFunction<number>;
    constitution?: ValidationFunction<number>;
    intelligence?: ValidationFunction<number>;
    wisdom?: ValidationFunction<number>;
    charisma?: ValidationFunction<number>;
    strength_save?: ValidationFunction<number>;
    dexterity_save?: ValidationFunction<number>;
    constitution_save?: ValidationFunction<number>;
    intelligence_save?: ValidationFunction<number>;
    wisdom_save?: ValidationFunction<number>;
    charisma_save?: ValidationFunction<number>;
    save_proficiencies?: ValidationFunction<string>;
    perception?: ValidationFunction<number>;
    damage_vulnerabilities?: ValidationFunction<string>;
    damage_vulnerability_list?: ValidationFunction<string>;
    damage_resistances?: ValidationFunction<string>;
    damage_resistance_list?: ValidationFunction<string>;
    damage_immunities?: ValidationFunction<string>;
    damage_immunity_list?: ValidationFunction<string>;
    condition_immunities?: ValidationFunction<string>;
    condition_immunity_list?: ValidationFunction<string>;
    blindsight?: ValidationFunction<number>;
    blindBeyond?: ValidationFunction<boolean>;
    darkvision?: ValidationFunction<number>;
    tremorsense?: ValidationFunction<number>;
    truesight?: ValidationFunction<number>;
    senses?: ValidationFunction<string>;
    languages?: ValidationFunction<string>;
    challenge_rating?: ValidationFunction<string>;
    cr?: ValidationFunction<number>;
    legendary_desc?: ValidationFunction<string>;
    mythic_desc?: ValidationFunction<string>;
};
export declare type PrimitiveOverrideProps<T> = Partial<T> & React.DOMAttributes<HTMLDivElement>;
export declare type MonsterStatblockCreateFormOverridesProps = {
    MonsterStatblockCreateFormGrid?: PrimitiveOverrideProps<GridProps>;
    ownerId?: PrimitiveOverrideProps<TextFieldProps>;
    name?: PrimitiveOverrideProps<TextFieldProps>;
    createdAt?: PrimitiveOverrideProps<TextFieldProps>;
    updatedAt?: PrimitiveOverrideProps<TextFieldProps>;
    desc?: PrimitiveOverrideProps<TextFieldProps>;
    size?: PrimitiveOverrideProps<TextFieldProps>;
    type?: PrimitiveOverrideProps<TextFieldProps>;
    subtype?: PrimitiveOverrideProps<TextFieldProps>;
    group?: PrimitiveOverrideProps<TextFieldProps>;
    alignment?: PrimitiveOverrideProps<TextFieldProps>;
    armor_class?: PrimitiveOverrideProps<TextFieldProps>;
    armor_desc?: PrimitiveOverrideProps<TextFieldProps>;
    current_hit_points?: PrimitiveOverrideProps<TextFieldProps>;
    hit_points?: PrimitiveOverrideProps<TextFieldProps>;
    hit_dice_num?: PrimitiveOverrideProps<TextFieldProps>;
    hit_dice?: PrimitiveOverrideProps<TextFieldProps>;
    strength?: PrimitiveOverrideProps<TextFieldProps>;
    dexterity?: PrimitiveOverrideProps<TextFieldProps>;
    constitution?: PrimitiveOverrideProps<TextFieldProps>;
    intelligence?: PrimitiveOverrideProps<TextFieldProps>;
    wisdom?: PrimitiveOverrideProps<TextFieldProps>;
    charisma?: PrimitiveOverrideProps<TextFieldProps>;
    strength_save?: PrimitiveOverrideProps<TextFieldProps>;
    dexterity_save?: PrimitiveOverrideProps<TextFieldProps>;
    constitution_save?: PrimitiveOverrideProps<TextFieldProps>;
    intelligence_save?: PrimitiveOverrideProps<TextFieldProps>;
    wisdom_save?: PrimitiveOverrideProps<TextFieldProps>;
    charisma_save?: PrimitiveOverrideProps<TextFieldProps>;
    save_proficiencies?: PrimitiveOverrideProps<TextFieldProps>;
    perception?: PrimitiveOverrideProps<TextFieldProps>;
    damage_vulnerabilities?: PrimitiveOverrideProps<TextFieldProps>;
    damage_vulnerability_list?: PrimitiveOverrideProps<TextFieldProps>;
    damage_resistances?: PrimitiveOverrideProps<TextFieldProps>;
    damage_resistance_list?: PrimitiveOverrideProps<TextFieldProps>;
    damage_immunities?: PrimitiveOverrideProps<TextFieldProps>;
    damage_immunity_list?: PrimitiveOverrideProps<TextFieldProps>;
    condition_immunities?: PrimitiveOverrideProps<TextFieldProps>;
    condition_immunity_list?: PrimitiveOverrideProps<TextFieldProps>;
    blindsight?: PrimitiveOverrideProps<TextFieldProps>;
    blindBeyond?: PrimitiveOverrideProps<SwitchFieldProps>;
    darkvision?: PrimitiveOverrideProps<TextFieldProps>;
    tremorsense?: PrimitiveOverrideProps<TextFieldProps>;
    truesight?: PrimitiveOverrideProps<TextFieldProps>;
    senses?: PrimitiveOverrideProps<TextFieldProps>;
    languages?: PrimitiveOverrideProps<TextFieldProps>;
    challenge_rating?: PrimitiveOverrideProps<TextFieldProps>;
    cr?: PrimitiveOverrideProps<TextFieldProps>;
    legendary_desc?: PrimitiveOverrideProps<TextFieldProps>;
    mythic_desc?: PrimitiveOverrideProps<TextFieldProps>;
} & EscapeHatchProps;
export declare type MonsterStatblockCreateFormProps = React.PropsWithChildren<{
    overrides?: MonsterStatblockCreateFormOverridesProps | undefined | null;
} & {
    clearOnSuccess?: boolean;
    onSubmit?: (fields: MonsterStatblockCreateFormInputValues) => MonsterStatblockCreateFormInputValues;
    onSuccess?: (fields: MonsterStatblockCreateFormInputValues) => void;
    onError?: (fields: MonsterStatblockCreateFormInputValues, errorMessage: string) => void;
    onChange?: (fields: MonsterStatblockCreateFormInputValues) => MonsterStatblockCreateFormInputValues;
    onValidate?: MonsterStatblockCreateFormValidationValues;
} & React.CSSProperties>;
export default function MonsterStatblockCreateForm(props: MonsterStatblockCreateFormProps): React.ReactElement;
