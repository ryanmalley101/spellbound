type Game
@model
@auth(rules: [{ allow: private, provider: iam}, { allow: private }])
{
    id: ID!
    name: String!
    owner: User! @belongsTo
    messageList: [Message]! @hasMany
    dms: [ID]
    players: [Player]! @hasMany
    maps: [Map]! @hasMany
    activeMap: ID
    characterSheets: [CharacterSheet]! @hasMany
}

input GameInput {
    name: String
    userGamesId: ID
}

type User
@model
@auth(rules: [{ allow: private }, { allow: private, provider: iam}])
{
    id: ID!
    email: String!
    username: String!
    players: [Player] @hasMany
    games: [Game] @hasMany
}


input UserInput {
    id: ID
    email: String
    username: String
}

type CreateGameResponse {
    id: ID!
}

input CreateNewGameInput {
    gameName: String!
    ownerId: ID!
    username: String!
}

type Message
@model
@auth(rules: [{ allow: private }])
{
    id: ID! @primaryKey(sortKeyFields: ["createdAt"])
    game: Game @belongsTo
    owner: ID!
    messageType: String
    advantage: Boolean
    disadvantage: Boolean
    damageDice: [AWSJSON]
    damageDiceResults: [AWSJSON]
    rolls: [AWSJSON]
    abilityName: String
    saveAbility: String
    saveScore: Int
    messageText: String
    diceString: String
    placeholder: String
    createdAt: AWSDateTime!
}

input MessageInput {
    gameMessageListId: ID
    owner: ID
    messageType: String
    advantage: Boolean
    disadvantage: Boolean
    damageDice: [AWSJSON]
    damageDiceResults: [AWSJSON]
    rolls: [AWSJSON]
    abilityName: String
    saveAbility: String
    saveScore: Int
    messageText: String
    placeholder: String
    diceString: String
}

type ParseMessageResponse {
    id: ID!
}

input ParseMessageInput {
    owner: ID!
    gameMessageListId: ID!
    messageType: String
    messageText: String
    abilityName: String
    d20mod: Int
    saveAbility: String
    saveScore: Int
    advantage: Boolean
    disadvantage: Boolean
    damageDice: [DamageDieInput]
}

type Mutation {
    parseMessage(input: ParseMessageInput!): ParseMessageResponse! @function(name: "parseMessage-dev")
    createNewGame(input: CreateNewGameInput!): CreateGameResponse! @function(name: "createNewGame-dev")
}


type DamageDie {
    damageType: String!
    damageString: String!
}

input DamageDieInput {
    damageType: String
    diceString: String
}

type Player
@model
@auth(rules: [{ allow: private }])
{
    id: ID!
    name: String!
    game: Game! @belongsTo
    user: User! @belongsTo
}

input PlayerInput {
    name: String
    userPlayersId: ID
    gamePlayersId: ID
}

type Map
@model
@auth(rules: [{ allow: private }])
{
    tokens: [Token]! @hasMany
    sizeX: Int!
    sizeY: Int!
    name: String!
    game: Game! @belongsTo
}


input MapInput {
    gameMapsId: ID
    sizeX: Int
    sizeY: Int
    name: String
}

type Token
@model
@auth(rules: [{ allow: private }])
{
    map: Map! @belongsTo
    character: CharacterSheet @belongsTo
    imageURL: String!
    layer: String
    width: Float!
    height: Float!
    rotation: Float!
    positionX: Float!
    positionY: Float!
    key: String
}


input TokenInput {
    mapTokensId: ID
    imageURL: String
    layer: String
    width: Float
    height: Float
    rotation: Float
    positionX: Float
    positionY: Float
    token: String
}

type CharacterSheet
@model
@auth(rules: [{ allow: private }])
{
    owner: ID!
    players: [ID]!
    game: Game! @belongsTo
    token: Token @hasOne
    name: String!
    class_level: String!
    background: String!
    player_name: String!
    race: String!
    alignment: String!
    xp: Int!
    inspiration: Int!
    proficiency_bonus: Int!
    ac: Int!
    armor_desc: String!
    max_hp: Int!
    death_success_1: Boolean!
    death_success_2: Boolean!
    death_success_3: Boolean!
    death_fail_1: Boolean!
    death_fail_2: Boolean!
    death_fail_3: Boolean!
    current_hp: Int!
    total_hd: String!
    current_hd: Int!
    temp_hp: Int!
    speed: String!
    strength_score: Int!
    dexterity_score: Int!
    constitution_score: Int!
    intelligence_score: Int!
    wisdom_score: Int!
    charisma_score: Int!
    strength_save_mod: Int!
    dexterity_save_mod: Int!
    constitution_save_mod: Int!
    intelligence_save_mod: Int!
    wisdom_save_mod: Int!
    charisma_save_mod: Int!
    strength_save_prof: Boolean!
    dexterity_save_prof: Boolean!
    constitution_save_prof: Boolean!
    intelligence_save_prof: Boolean!
    wisdom_save_prof: Boolean!
    charisma_save_prof: Boolean!
    passive_perception: Int!
    passive_investigation: Int!
    passive_insight: Int!
    acrobatics_prof: Boolean!
    animal_handling_prof: Boolean!
    arcana_prof: Boolean!
    athletics_prof: Boolean!
    deception_prof: Boolean!
    history_prof: Boolean!
    insight_prof: Boolean!
    intimidation_prof: Boolean!
    investigation_prof: Boolean!
    medicine_prof: Boolean!
    nature_prof: Boolean!
    perception_prof: Boolean!
    performance_prof: Boolean!
    persuasion_prof: Boolean!
    religion_prof: Boolean!
    sleight_of_hand_prof: Boolean!
    stealth_prof: Boolean!
    survival_prof: Boolean!
    acrobatics_mod: Int!
    animal_handling_mod: Int!
    arcana_mod: Int!
    athletics_mod: Int!
    deception_mod: Int!
    history_mod: Int!
    insight_mod: Int!
    intimidation_mod: Int!
    investigation_mod: Int!
    medicine_mod: Int!
    nature_mod: Int!
    perception_mod: Int!
    performance_mod: Int!
    persuasion_mod: Int!
    religion_mod: Int!
    sleight_of_hand_mod: Int!
    stealth_mod: Int!
    survival_mod: Int!
    initiative: Int!
    defenses: String!
    senses: String!
    save_notes: String!
    movement: String!
    other_profs: String!
    attacks: [Attack]!
    attack_notes: String!
    spell_slots_1: Int!
    spell_slots_2: Int!
    spell_slots_3: Int!
    spell_slots_4: Int!
    spell_slots_5: Int!
    spell_slots_6: Int!
    spell_slots_7: Int!
    spell_slots_8: Int!
    spell_slots_9: Int!
    spell_slots_max_1: Int!
    spell_slots_max_2: Int!
    spell_slots_max_3: Int!
    spell_slots_max_4: Int!
    spell_slots_max_5: Int!
    spell_slots_max_6: Int!
    spell_slots_max_7: Int!
    spell_slots_max_8: Int!
    spell_slots_max_9: Int!
    pact_level: Int!
    pact_available: Int!
    pact_maximum: Int!
    spells: [Spell]!
    spells_notes: String!
    weight_carried: Int!
    weight_capacity: Int!
    encumberance_notes: String!
    pp: Int!
    gp: Int!
    ep: Int!
    sp: Int!
    cp: Int!
    attuned_magic_items: [String]!
    attunement_notes: String!
    inventory: [Item]!
    inventory_notes: String!
    features_left: String!
    features_center: String!
    features_right: String!
    gender: String!
    age: String!
    height: String!
    weight: String!
    faith: String!
    skin: String!
    eyes: String!
    hair: String!
    organizations: String!
    backstory: String!
    personality: String!
    ideals: String!
    bonds: String!
    flaws: String!
    notes_left: String!
    notes_center: String!
    notes_right: String!
}

type Attack {
    name: String!
    notes: String!
    attack_bonus: Int!
    damage: [DamageDice]!
}

input AttackInput {
    name: String
    notes: String
    attack_bonus: Int
    damage: [DamageDiceInput]
}

type DamageDice {
    damage_dice: String
    damage_type: String
}

input DamageDiceInput {
    damage_dice: String
    damage_type: String
}

type Spell {
    prepared: Boolean!
    name: String!
    level: Int!
    source: String!
    attack_save: String!
    cast_time: String!
    range_shape: String!
    duration: String!
    components: String!
    notes: String!
}

input SpellInput {
    prepared: Boolean
    name: String
    level: Int
    source: String
    attack_save: String
    cast_time: String
    range_shape: String
    duration: String
    components: String
    notes: String
}

type Item {
    equipped: Boolean!
    name: String!
    count: Int!
    weight: Float!
    value: String!
    notes: String!
}

input ItemInput {
    equipped: Boolean
    name: String
    count: Int
    weight: Float
    value: String
    notes: String
}